var mongoose = require('mongoose');
var router = require('express').Router();

var auth = require('../helpers/auth');
var generatePassword = require('../helpers/utility').generatePassword;
var throwError = require('../helpers/throwError');

var Customer = mongoose.model('Customer');
var RestaurantOwner = mongoose.model('RestaurantOwner');

/*
 * Create usr for new customers
 * required data: name, phone, email
 * optional data: password
 */
router.post('/', function(req, res, next) {
	Customer.find().or([
		{email: req.body.usr.email},
		{phone: req.body.usr.phone}
	]).then(function(usr) {
		if (usr.length) throwError.unauthorized('Email or phone no. already exist');

		let password = req.body.usr.password;
		if (!password) {
			password = generatePassword(); 
		}

		var usr = new Customer();

		usr.name = req.body.usr.name;
		usr.email = req.body.usr.email;
		usr.phone = req.body.usr.phone;
		usr.setPassword(password);

		usr.save().then(function() {
			//TODO mail and sms autogenerated password 
			console.log('Autogenerated Password for ', req.body.usr.email, ' is: ', password);

			return res.json({usr: usr.toAuthJSON()});
		}).catch(next);
	}).catch(next);
});

/*
 * Read usr
 * required data: Authentication token
 */
router.get('/', auth.required, function(req, res, next) {
	Customer.findById(req.usr.id).then(function(usr) {
		if (!usr) return res.sendStatus(401);

		return res.send({usr: usr.getusrJSON()});
	}).catch(next);
});

/*
 * Update customer info
 * required data: Authentication token
 * optional data: name, email, phone, password
 */
router.put('/', auth.required, function(req, res, next) {
	Customer.findById(req.usr.id).then(function(usr) {
		if (!usr) return res.sendStatus(401);

		let data = req.body.usr;

		if (!data || !(data.name || data.email || data.phone || data.password)){
			return res.status(400).json({errors: 'Provide data to update'});
		}

		// Update fields that were passed
		if (typeof data.firstName !== 'undefined')
			usr.firstName = data.firstName;
		if (typeof data.lastName !== 'undefined')
			usr.lastName = data.lastName;
		if (typeof data.email !== 'undefined')
			usr.email = data.email;
		if (typeof data.phone !== 'undefined')
			usr.phone = data.phone;
		if (typeof data.password !== 'undefined')
			usr.setPassword(data.password);

		usr.save().then(function() {
			return res.send({usr: usr.getusrJSON()});
		}).catch(next);
	}).catch(next);
});

/*
 * Create Token / usr login
 * required data: email, password
 */
router.post('/login', function(req, res, next) {
	if (!req.body.usr) {
		return res.sendStatus(400);
	}
	if (!req.body.usr.email) {
	    return res.status(422).json({errors: {email: "can't be blank"}});
	}
	if (!req.body.usr.password) {
	    return res.status(422).json({errors: {password: "can't be blank"}});
	}

	Customer.findOne({'email': req.body.usr.email}).then(function(usr) {
		if (!usr) return res.status(401).json({errors: 'Wrong email or password'});
		if (!usr.validPassword(req.body.usr.password)) {
			return res.status(401).json({errors: 'Wrong email or password'});
		};
		
		return res.json({usr: usr.toAuthJSON()});
	}).catch(next);
});

/*
 * Restaurant owner login
 * required data: email, password
 */
router.post('/restaurant/login', function(req, res, next) {
	if (!req.body.usr) {
		return res.sendStatus(400);
	}
	if (!req.body.usr.email) {
	    return res.status(422).json({errors: {email: "can't be blank"}});
	}
	if (!req.body.usr.password) {
	    return res.status(422).json({errors: {password: "can't be blank"}});
	}

	RestaurantOwner.findOne({'email': req.body.usr.email}).then(function(usr) {
		if (!usr) return res.status(401).json({errors: 'Wrong email or password'});
		if (!usr.validPassword(req.body.usr.password)) {
			return res.status(401).json({errors: 'Wrong email or password'});
		};

		return res.json({usr: usr.toAuthJSON()});
	}).catch(next);
});

module.exports = router;
